@import "~@angular/material/theming";

// Calculates the letter spacing for a font size using the tracking in Sketch
@function mat-calc-letter-spacing($tracking, $font-size) {
  @return ($tracking / $font-size) * 1rem;
}

// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to
// the individual properties if a value that isn't allowed in the shorthand is passed in.
// (Modified from original code to allow for !important selector)
@mixin mat-typography-font-shorthand-important($font-size, $font-weight, $line-height, $font-family) {
  // If any of the values are set to `inherit`, we can't use the shorthand
  // so we fall back to passing in the individual properties.
  @if ($font-size == inherit or
       $font-weight == inherit or
       $line-height == inherit or
       $font-family == inherit or
       $font-size == null or
       $font-weight == null or
       $line-height == null or
       $font-family == null) {

    font-size: $font-size !important;
    font-weight: $font-weight !important;
    line-height: $line-height !important;
    font-family: $font-family !important;
  }
  @else {
    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note
    // that we need to use interpolation for `font-size/line-height` in order to prevent
    // Sass from dividing the two values.
    font: $font-weight #{$font-size}/#{$line-height} $font-family !important;
  }
}

// Converts a typography level into CSS styles.
// (Modified to allow for !important selector)
@mixin mat-typography-level-to-styles-important($config, $level) {
  $font-size: mat-font-size($config, $level);
  $font-weight: mat-font-weight($config, $level);
  $line-height: mat-line-height($config, $level);
  $font-family: mat-font-family($config, $level);

  @include mat-typography-font-shorthand-important($font-size, $font-weight, $line-height, $font-family);
  letter-spacing: mat-letter-spacing($config, $level) !important;
  // text-transform: mat-text-transform($config, $level) !important;
}

// Code adapted from Angular Material's typography files but modified
// to match the new Material Design typography specifications
// Adds the base typography styles, based on a config.
@mixin studybuddy-base-typography($config, $selector: '.studybuddy-custom-typography') {
  @each $key, $level in $config {
    @if $key != 'font-family' {
      #{$selector} .mat-#{$key} {
        @include mat-typography-level-to-styles($config, $key);
        @if $key != 'body-1' or $key != 'body-2' or $key != 'button' or
          $key != 'caption' or $key != 'overline' {
          margin: 0 0 16px
        }
      }
      @if $key == 'heading-1' or $key == 'heading-2' or $key == 'heading-3' or
        $key == 'heading-4' or $key == 'heading-5' or $key == 'heading-6' {
        #{$selector} h#{str-slice($key, 9)},
        #{$selector} .mat-h#{str-slice($key, 9)} {
          @extend .mat-#{$key};
        }
      }
    }
  }

  #{$selector} {
    @include mat-typography-level-to-styles($config, body-1);
    p {
      margin: 0 0 12px;
    }
  }
}

// Note: The angular-material-typography mixin should've been called once
// in the app's SCSS before calling this mixin
@mixin studybuddy-typography($config: null) {
	@if $config == null {
		$config: studybuddy-typography-config();
  }
  @include studybuddy-base-typography($config);
	// Custom overrides
	.mat-dialog-title {
		@include mat-typography-level-to-styles-important($config, heading-6);
	}
	.mat-expansion-panel-header {
		font: {
			family: mat-font-family($config, subtitle-1);
			size: mat-font-size($config, subtitle-1);
			weight: mat-font-weight($config, subtitle-1);
		}
	}
	.mat-card-title {
		font: {
			size: mat-font-size($config, heading-6);
			weight: mat-font-weight($config, heading-6);
		}
	}

	.mat-card-header .mat-card-title {
		font-size: mat-font-size($config, heading-6);
	}
}
@function studybuddy-typography-config(
	$font-family: 'Roboto, "Helvetica Neue", sans-serif',
	$display-4: mat-typography-level(112px, 112px, 300),
	$display-3: mat-typography-level(56px, 56px, 400),
	$display-2: mat-typography-level(45px, 48px, 400),
	$display-1: mat-typography-level(34px, 40px, 400),
	$headline: mat-typography-level(24px, 32px, 400),
	$title: mat-typography-level(20px, 32px, 500),
	$subheading-2: mat-typography-level(16px, 28px, 400),
	$subheading-1: mat-typography-level(15px, 24px, 400),
	// $body-2: mat-typography-level(14px, 24px, 500),
	// $body-1: mat-typography-level(14px, 20px, 400),
	// $caption: mat-typography-level(12px, 20px, 400),
	// $button: mat-typography-level(14px, 14px, 500),
  // Line-height must be unit-less fraction of the font-size.
  $input: mat-typography-level(inherit, 1.125, 400),
  // New typography specs
  $heading-1: mat-typography-level(
    96 * 0.0625rem,
    112 * 0.0625rem,
    300,
    $letter-spacing: mat-calc-letter-spacing(-1.5, 96)
  ),
	$heading-2: mat-typography-level(
    60 * 0.0625rem,
    71 * 0.0625rem,
    300,
    $letter-spacing: mat-calc-letter-spacing(-0.5, 60)
	),
	$heading-3: mat-typography-level(48 * 0.0625rem, 57 * 0.0625rem),
	$heading-4: mat-typography-level(
    34 * 0.0625rem,
    40 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(0.25, 34)
  ),
	$heading-5: mat-typography-level(24 * 0.0625rem, 28 * 0.0625rem),
	$heading-6: mat-typography-level(
    20 * 0.0625rem,
    24 * 0.0625rem,
    500,
    $letter-spacing: mat-calc-letter-spacing(0.15, 20)
  ),
	$subtitle-1: mat-typography-level(
    16 * 0.0625rem,
    24 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(0.15, 16)
  ),
	$subtitle-2: mat-typography-level(
    14 * 0.0625rem,
    24 * 0.0625rem,
    500,
    $letter-spacing: mat-calc-letter-spacing(0.1, 14)
  ),
	$body-1: mat-typography-level(
    16 * 0.0625rem,
    28 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(0.44, 16)
  ),
	$body-2: mat-typography-level(
    14 * 0.0625rem,
    20 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(0.25, 14)
  ),
	$button: mat-typography-level(
    14 * 0.0625rem,
    16 * 0.0625rem,
    500,
    $letter-spacing: mat-calc-letter-spacing(1.35, 14)
  ),
	$caption: mat-typography-level(
    12 * 0.0625rem,
    16 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(0.4, 12)
  ),
  // TODO: Figure out a way to support the text-transform property
  $overline: mat-typography-level(
    10 * 0.0625rem,
    16 * 0.0625rem,
    $letter-spacing: mat-calc-letter-spacing(1.5, 10)
  )
) {
	// Declare an initial map with all of the levels.
	$config: (
		display-4: $display-4,
		display-3: $display-3,
		display-2: $display-2,
		display-1: $display-1,
		headline: $headline,
		title: $title,
		subheading-2: $subheading-2,
		subheading-1: $subheading-1,
		// body-2:         $body-2,
		// body-1:         $body-1,
		// caption:        $caption,
		// button:         $button,
		input: $input,
		// New typography specs
		heading-1: $heading-1,
		heading-2: $heading-2,
		heading-3: $heading-3,
		heading-4: $heading-4,
		heading-5: $heading-5,
		heading-6: $heading-6,
		subtitle-1: $subtitle-1,
		subtitle-2: $subtitle-2,
		body-1: $body-1,
		body-2: $body-2,
		button: $button,
		caption: $caption,
		overline: $overline
  );

	// Loop through the levels and set the `font-family` of the ones that don't have one to the base.
	// Note that Sass can't modify maps in place, which means that we need to merge and re-assign.
	@each $key, $level in $config {
		@if map-get($level, font-family) == null {
			$new-level: map-merge(
				$level,
				(
					font-family: $font-family
				)
			);
			$config: map-merge(
				$config,
				(
					$key: $new-level
				)
			);
		}
	}

	// Add the base font family to the config.
	@return map-merge(
		$config,
		(
			font-family: $font-family
		)
	);
}
